# SLip 14 A
#Create a CNN model and train it on mnist handwritten digit dataset. Using model find 
#out the digit written by a hand in a given image. 
#Import mnist dataset from tensorflow.keras.datasets.

# CNN on MNIST Handwritten Digits
import tensorflow as tf
from tensorflow.keras import datasets, layers, models
import matplotlib.pyplot as plt
import numpy as np

# 1. Load MNIST dataset
(x_train, y_train), (x_test, y_test) = datasets.mnist.load_data()

# 2. Preprocess data
x_train = x_train.reshape(-1, 28, 28, 1).astype("float32") / 255.0
x_test  = x_test.reshape(-1, 28, 28, 1).astype("float32") / 255.0

# 3. Build CNN model
model = models.Sequential([
    layers.Conv2D(32, (3,3), activation='relu', input_shape=(28,28,1)),
    layers.MaxPooling2D((2,2)),
    layers.Conv2D(64, (3,3), activation='relu'),
    layers.MaxPooling2D((2,2)),
    layers.Flatten(),
    layers.Dense(128, activation='relu'),
    layers.Dense(10, activation='softmax')   # 10 digits
])

# 4. Compile model
model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

# 5. Train model
model.fit(x_train, y_train, epochs=5, validation_data=(x_test, y_test))

# 6. Evaluate model
test_loss, test_acc = model.evaluate(x_test, y_test, verbose=0)
print("Test Accuracy:", test_acc)

# 7. Predict on a test image
index = 0   # choose any test image index
plt.imshow(x_test[index].reshape(28,28), cmap="gray")
plt.title("Actual Label: {}".format(y_test[index]))
plt.show()

pred = model.predict(x_test[index].reshape(1,28,28,1))
print("Predicted Digit:", np.argmax(pred))

-------------------------------------------------------------
#Slip 14B , 23B 
#Write a python program to find all null values in a given dataset and remove them.Create your own dataset.

import pandas as pd

# 1. Create dataset with some null values
data = {
    'size': [1500, 2000, None, 2500, 3000],
    'price': [300000, None, 500000, 600000, None]
}
df = pd.DataFrame(data)

# 2. Find null values
print("Null values in dataset:\n", df.isnull().sum())

# 3. Remove null values
df_clean = df.dropna()

# 4. Display cleaned dataset
print("\nDataset after removing null values:\n", df_clean)
-------------------------------------------------------------