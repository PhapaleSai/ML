 ##SLIP 29A
 ## Take iris flower dataset and reduce 4D data to 2D data using PCA. Then train the 
##model and predict new flower with given measurements

from sklearn.decomposition import PCA
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

# Load dataset
iris = load_iris()
X = iris.data
y = iris.target

# Apply PCA (fit on training data only)
pca = PCA(n_components=2)
X_pca = pca.fit_transform(X)

# Split data, train model
X_train, X_test, y_train, y_test = train_test_split(X_pca, y, test_size=0.2, random_state=42)
model = LogisticRegression().fit(X_train, y_train)

# Evaluate
print(f"Accuracy: {accuracy_score(y_test, model.predict(X_test)):.2f}")

# Predict for new flower
new_flower = [[5.1, 3.5, 1.4, 0.2]]
pred = model.predict(pca.transform(new_flower))
print(f"Predicted class: {iris.target_names[pred][0]}")

----------------------------------------------------------------------------------------------

#Slip 29B
# Use K-means clustering model and classify the employees into various income groups 
# or clusters. Preprocess data if require (i.e. drop missing or null values). Use elbow 
# method and Silhouette Score to find value of k.  

import pandas as pd
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import silhouette_score

# Sample dataset
df = pd.DataFrame({'EmployeeID':[1,2,3,4,5,6,7,8],
                   'Income':[40000,50000,60000,45000,70000,80000,75000,62000]})

# Scale data
X = StandardScaler().fit_transform(df[['Income']])

# Elbow method
inertia = [KMeans(n_clusters=k, random_state=42).fit(X).inertia_ for k in range(1,6)]
print("Inertia:", inertia)

# Silhouette scores
for k in range(2,5):
    labels = KMeans(n_clusters=k, random_state=42).fit_predict(X)
    print(f"k={k}, Silhouette={silhouette_score(X, labels):.2f}")

# Final clustering
df['Cluster'] = KMeans(n_clusters=3, random_state=42).fit_predict(X)
print(df)

----------------------------------------------------------------------------------------------