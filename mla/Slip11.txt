##SLIP 11A,6A,18B
 ##Write a python program to implement Polynomial Linear Regression for  
##Boston Housing Dataset.(CALIFORNIA DATASET)

from sklearn.datasets import fetch_california_housing
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import PolynomialFeatures
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Load dataset
housing = fetch_california_housing()
X, y = housing.data, housing.target

# Polynomial transformation (degree 2)
X_poly = PolynomialFeatures(degree=2).fit_transform(X)

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X_poly, y, test_size=0.2, random_state=0)

# Train Polynomial Regression model
model = LinearRegression().fit(X_train, y_train)

# Predict and evaluate
y_pred = model.predict(X_test)
print("MSE:", mean_squared_error(y_test, y_pred))
print("RÂ²:", r2_score(y_test, y_pred))
print("First 5 Predicted Prices:", y_pred[:5])
-----------------------------------------------------------------------------------------------------------
# Slip 11B,24A
#Write a python program to Implement Decision Tree classifier model on Data which  
# is extracted from images that were taken from genuine and forged banknote-like  
# specimens. (refer UCI dataset https://archive.ics.uci.edu/dataset/267/banknote+authentication) 

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, classification_report
import matplotlib.pyplot as plt
from sklearn import tree

# 1. Load the dataset
# If you have downloaded the CSV from UCI, replace 'data_banknote_authentication.txt' with the path
# Dataset columns: ['variance','skewness','curtosis','entropy','class']
url = "https://archive.ics.uci.edu/ml/machine-learning-databases/00267/data_banknote_authentication.txt"
df = pd.read_csv(url, header=None, names=['Variance','Skewness','Curtosis','Entropy','Class'])

# 2. Features and target
X = df.drop('Class', axis=1)
y = df['Class']

# 3. Split dataset into train/test
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# 4. Train Decision Tree Classifier
model = DecisionTreeClassifier(criterion='entropy', random_state=0)
model.fit(X_train, y_train)

# 5. Predict and evaluate
y_pred = model.predict(X_test)
print("Accuracy:", accuracy_score(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))

# 6. Optional: Visualize the decision tree
plt.figure(figsize=(12,8))
tree.plot_tree(model, feature_names=X.columns, class_names=['Forged','Genuine'], filled=True)
plt.show()
--------------------------------------------------------------------------------------------------------------