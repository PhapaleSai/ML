##SLIP 21A
 ##Create a multiple linear regression model for house price dataset divide dataset into 
##train and test data while giving it to model and predict prices of house. 

import pandas as pd
from sklearn.linear_model import LinearRegression

# Dataset
df = pd.DataFrame({
    'Size':[1500,1800,2400,3000,3500,4000],
    'Bedrooms':[3,4,4,5,5,6],
    'Age':[10,15,20,25,30,35],
    'Price':[400000,500000,600000,650000,700000,750000]
})

# Train model
X, y = df[['Size','Bedrooms','Age']], df['Price']
model = LinearRegression().fit(X, y)

# Predict
print(f'MSE: {mean_squared_error(y_test, y_pred):.2f}')
print("Predicted price:", model.predict([[2500,4,20]])[0])

---------------------------------------------------------------------------------------------------

##SLIP 9B,21B,24B
##Write a python program to implement Linear SVM using UniversalBank.csv

import pandas as pd
from sklearn.svm import SVC
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score

# Sample dataset
df = pd.DataFrame({
    'Age':[25,45,35,50,23,40,55,60,35,41],
    'Income':[50,100,60,90,45,80,120,150,70,95],
    'Family':[1,2,2,3,1,2,2,3,1,2],
    'CCAvg':[1.5,2.5,2.0,3.0,1.2,2.8,3.5,4.0,2.2,2.7],
    'Education':[1,2,2,1,1,2,2,1,1,2],
    'Personal Loan':[0,1,0,1,0,1,1,1,0,1]
})

# Features & target
X = df.drop('Personal Loan', axis=1)
y = df['Personal Loan']

# Train-test split
X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.3,random_state=42)

# Scaling
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Train Linear SVM
model = SVC(kernel='linear')
model.fit(X_train, y_train)

# Predict & evaluate
y_pred = model.predict(X_test)
print(f'Accuracy: {accuracy_score(y_test, y_pred)*100:.2f}%')
---------------------------------------------------------------------------------------------------

