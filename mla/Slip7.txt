# Slip 7A , 12B , 19A , 23 A
# Fit the simple linear regression model to Salary_positions.csv data. Predict the sa 
#of level 11 and level 12 employees. 
import pandas as pd
from sklearn.linear_model import LinearRegression

# 1. Create a dummy dataset
data = {
    'Level': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
    'Salary': [45000, 50000, 60000, 80000, 110000, 150000, 200000, 300000, 500000, 1000000]
}
df = pd.DataFrame(data)
print("Dummy Dataset:\n", df)

# 2. Features and target
X = df[['Level']]
y = df['Salary']

# 3. Train Simple Linear Regression
model = LinearRegression()
model.fit(X, y)

# 4. Predict salaries for level 11 and 12
predicted_salaries = model.predict([[11], [12]])
print("\nPredicted Salaries for Level 11 and 12:", predicted_salaries)
-----------------------------------------------------------------------------------------------
##SLIP 7B,19B
##Write a python program to implement Naive Bayes on weather forecast dataset

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

# 1. Create a dummy weather dataset
# Features: Outlook, Temperature, Humidity, Windy
# Target: Play (Yes=1, No=0)
data = {
    'Outlook': ['Sunny','Sunny','Overcast','Rain','Rain','Rain','Overcast','Sunny','Sunny','Rain'],
    'Temperature': ['Hot','Hot','Hot','Mild','Cool','Cool','Cool','Mild','Cool','Mild'],
    'Humidity': ['High','High','High','High','Normal','Normal','Normal','High','Normal','High'],
    'Windy': ['False','True','False','False','False','True','True','False','False','True'],
    'Play': [0,0,1,1,1,0,1,0,1,0]
}
df = pd.DataFrame(data)

# 2. Convert categorical variables to numeric using one-hot encoding
X = pd.get_dummies(df.drop('Play', axis=1))
y = df['Play']

# 3. Split dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)

# 4. Initialize and train Gaussian Naive Bayes model
model = GaussianNB()
model.fit(X_train, y_train)

# 5. Make predictions
y_pred = model.predict(X_test)

# 6. Evaluate the model
print("Accuracy:", accuracy_score(y_test, y_pred))
print("\nConfusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))
------------------------------------------------------------------------------------------------------------