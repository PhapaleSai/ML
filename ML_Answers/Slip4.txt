 ##SLIP 4A,18A
 ##Write a python program to implement k-means algorithm on a mall_customers dataset.
import pandas as pd
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt
import seaborn as sns

# Sample dataset
df = pd.DataFrame({
    'CustomerID':[1,2,3,4,5,6,7,8],
    'Annual Income (k$)':[15,16,17,18,19,20,21,22],
    'Spending Score (1-100)':[39,81,6,77,40,76,6,94]
})

# Features for clustering
X = df[['Annual Income (k$)','Spending Score (1-100)']]

# Apply K-Means
kmeans = KMeans(n_clusters=3, random_state=0)
df['Cluster'] = kmeans.fit_predict(X)

# Plot clusters
plt.figure(figsize=(8,6))
sns.scatterplot(x='Annual Income (k$)', y='Spending Score (1-100)',
                hue='Cluster', data=df, palette="viridis", s=100)
plt.title("K-Means Clustering of Mall Customers")
plt.xlabel("Annual Income (k$)")
plt.ylabel("Spending Score (1-100)")
plt.legend(title="Cluster")
plt.show()

-------------------------------------------------------------------------------------------------------------------------------
 ## Slip 2A,4B,13B,22A
 ##Write a python program to implement simple Linear Regression for predicting house   
##price. First find all null values in a given dataset and remove them.

 # Import necessary libraries
 import pandas as pd
 from sklearn.model_selection import train_test_split
 from sklearn.linear_model import LinearRegression
 from sklearn.metrics import mean_squared_error
 
# Sample data (or load your data as df = pd.read_csv("your_dataset.csv"))
 data = {
    'size': [1500, 2000, 2500, None, 3000, 3500, 4000, None],
    'price': [300000, 400000, 500000, 450000, 600000, 700000, 800000, None]
 }
 df = pd.DataFrame(data)
 
# 1. Check and remove null values
 df = df.dropna()
 
# 2. Separate features and target variable
 X = df[['size']]   # Feature (independent variable)
 y = df['price']    # Target (dependent variable)
 
# 3. Split data into training and testing sets
 X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)
 
# 4. Initialize and train the Linear Regression model
 model = LinearRegression()
 model.fit(X_train, y_train)
 
# 5. Predict and evaluate the model
 y_pred = model.predict(X_test)
 mse = mean_squared_error(y_test, y_pred)
 print("Mean Squared Error:", mse)
 
# 6. Display model prediction for test data
 print("Predicted House Prices:", y_pred)
---------------------------------------------------------------------------------------------------------------------
