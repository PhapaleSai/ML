 ## Slip 3A,15B,17B
 ##Write a python program to implement multiple Linear Regression for a house price 
##dataset. Divide the dataset into training and testing data. 
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Sample data (or use: df = pd.read_csv("house_prices.csv"))
df = pd.DataFrame({
    'size':[1500,2000,2500,1800,3000,3500,4000],
    'bedrooms':[3,4,4,3,5,5,6],
    'age':[10,15,20,15,5,8,6],
    'price':[300000,400000,500000,380000,600000,700000,800000]
})

X, y = df[['size','bedrooms','age']], df['price']
X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=0)

model = LinearRegression().fit(X_train,y_train)
y_pred = model.predict(X_test)

print("MSE:", mean_squared_error(y_test,y_pred))
print("R²:", r2_score(y_test,y_pred))
print("Predicted Prices:", y_pred)
-------------------------------------------------------------------------------------------------------------
# SLIP 3 B
#Use dataset crash.csv is an accident survivor’s dataset portal for USA hosted by 
# data.gov. The dataset contains passengers age and speed of vehicle (mph) at the time 
# of impact and fate of passengers (1 for survived and 0 for not survived) after a crash.  
# use logistic regression to decide if the age and speed can predict the survivability of the  
# passengers. 

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

# 1. Create dummy dataset directly
df = pd.DataFrame({
    'age':    [45, 67, 34, 56, 47, 29, 61, 38, 50, 42],
    'speed':  [120, 100, 134, 126, 130, 110, 140, 115, 125, 118],
    'survive':[1, 0, 1, 0, 1, 1, 0, 1, 0, 1]
})

# 2. Features and target
X = df[['age','speed']]
y = df['survive']

# 3. Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

# 4. Train Logistic Regression
model = LogisticRegression()
model.fit(X_train, y_train)

# 5. Predict and evaluate
y_pred = model.predict(X_test)
print("Accuracy:", accuracy_score(y_test, y_pred))
print("\nConfusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))

# 6. Example prediction
print("Prediction (age=40, speed=120):", model.predict([[40, 120]]))
----------------------------------------------------------------------------------------------------------------------------------------------------