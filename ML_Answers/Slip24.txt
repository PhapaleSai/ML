# Slip 11B,24A
#Write a python program to Implement Decision Tree classifier model on Data which  
# is extracted from images that were taken from genuine and forged banknote-like  
# specimens. (refer UCI dataset https://archive.ics.uci.edu/dataset/267/banknote+authentication) 

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, classification_report
import matplotlib.pyplot as plt
from sklearn import tree

# 1. Load the dataset
# If you have downloaded the CSV from UCI, replace 'data_banknote_authentication.txt' with the path
# Dataset columns: ['variance','skewness','curtosis','entropy','class']
url = "https://archive.ics.uci.edu/ml/machine-learning-databases/00267/data_banknote_authentication.txt"
df = pd.read_csv(url, header=None, names=['Variance','Skewness','Curtosis','Entropy','Class'])

# 2. Features and target
X = df.drop('Class', axis=1)
y = df['Class']

# 3. Split dataset into train/test
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# 4. Train Decision Tree Classifier
model = DecisionTreeClassifier(criterion='entropy', random_state=0)
model.fit(X_train, y_train)

# 5. Predict and evaluate
y_pred = model.predict(X_test)
print("Accuracy:", accuracy_score(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))

# 6. Optional: Visualize the decision tree
plt.figure(figsize=(12,8))
tree.plot_tree(model, feature_names=X.columns, class_names=['Forged','Genuine'], filled=True)
plt.show()
---------------------------------------------------------------------------------------------------

##SLIP 9B,21B,24B
##Write a python program to implement Linear SVM using UniversalBank.csv

import pandas as pd
from sklearn.svm import SVC
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score

# Sample dataset
df = pd.DataFrame({
    'Age':[25,45,35,50,23,40,55,60,35,41],
    'Income':[50,100,60,90,45,80,120,150,70,95],
    'Family':[1,2,2,3,1,2,2,3,1,2],
    'CCAvg':[1.5,2.5,2.0,3.0,1.2,2.8,3.5,4.0,2.2,2.7],
    'Education':[1,2,2,1,1,2,2,1,1,2],
    'Personal Loan':[0,1,0,1,0,1,1,1,0,1]
})

# Features & target
X = df.drop('Personal Loan', axis=1)
y = df['Personal Loan']

# Train-test split
X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.3,random_state=42)

# Scaling
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Train Linear SVM
model = SVC(kernel='linear')
model.fit(X_train, y_train)

# Predict & evaluate
y_pred = model.predict(X_test)
print(f'Accuracy: {accuracy_score(y_test, y_pred)*100:.2f}%')
---------------------------------------------------------------------------------------------------