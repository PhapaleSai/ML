###DO NOT TAKE THIS SLIP
# SLip 13A Diffcuilt dont take it 
# Create RNN model and analyze the Google stock price dataset. Find out increasing or     
#decreasing trends of stock price for the next day

import warnings, tensorflow as tf
warnings.filterwarnings("ignore")
tf.get_logger().setLevel('ERROR')
import pandas as pd, numpy as np, matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense

# Load data
# link :- https://www.kaggle.com/datasets/akram24/google-stock-price-train
train = pd.read_csv("Google_Stock_Price_Train.csv")[['Open']].values
scaler = MinMaxScaler()
train_scaled = scaler.fit_transform(train)

# Prepare training set (60 steps -> 1 output)
X, y = [], []
for i in range(60, len(train_scaled)):
    X.append(train_scaled[i-60:i, 0])
    y.append(train_scaled[i, 0])
X, y = np.array(X), np.array(y)
X = X.reshape(X.shape[0], X.shape[1], 1)

# Build & train LSTM
model = Sequential([LSTM(50, return_sequences=True, input_shape=(X.shape[1],1)),
                    LSTM(50), Dense(1)])
model.compile(optimizer='adam', loss='mse')
model.fit(X, y, epochs=20, batch_size=32, verbose=0)

# Test data
test = pd.read_csv("Google_Stock_Price_Test.csv")[['Open']].values
total = np.concatenate((train, test))
inputs = scaler.transform(total[len(total)-len(test)-60:].reshape(-1,1))

X_test = np.array([inputs[i-60:i,0] for i in range(60,len(inputs))])
X_test = X_test.reshape(X_test.shape[0], X_test.shape[1], 1)

pred = scaler.inverse_transform(model.predict(X_test))

# Trend (increase/decrease)
trend = ["↑" if pred[i]>pred[i-1] else "↓" for i in range(1,len(pred))]
print("Next-day trends:", trend[:10])

# Plot
plt.plot(test, color='red', label='Real')
plt.plot(pred, color='blue', label='Predicted')
plt.legend(); plt.show()

--------------------------------------------------------------
## Slip 2A,4B,13B,22A
 ##Write a python program to implement simple Linear Regression for predicting house   
##price. First find all null values in a given dataset and remove them.

 # Import necessary libraries
 import pandas as pd
 from sklearn.model_selection import train_test_split
 from sklearn.linear_model import LinearRegression
 from sklearn.metrics import mean_squared_error
 
# Sample data (or load your data as df = pd.read_csv("your_dataset.csv"))
 data = {
    'size': [1500, 2000, 2500, None, 3000, 3500, 4000, None],
    'price': [300000, 400000, 500000, 450000, 600000, 700000, 800000, None]
 }
 df = pd.DataFrame(data)
 
# 1. Check and remove null values
 df = df.dropna()
 
# 2. Separate features and target variable
 X = df[['size']]   # Feature (independent variable)
 y = df['price']    # Target (dependent variable)
 
# 3. Split data into training and testing sets
 X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)
 
# 4. Initialize and train the Linear Regression model
 model = LinearRegression()
 model.fit(X_train, y_train)
 
# 5. Predict and evaluate the model
 y_pred = model.predict(X_test)
 mse = mean_squared_error(y_test, y_pred)
 print("Mean Squared Error:", mse)
 
# 6. Display model prediction for test data
 print("Predicted House Prices:", y_pred)
----------------------------------------------------------------------------------------